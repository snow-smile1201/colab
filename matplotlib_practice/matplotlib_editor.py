# -*- coding: utf-8 -*-
"""matplotlib_editor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-qAj2lflkQoAXX5m15fJAmX6ywE1I9bV

# Matplotlib練習問題

 1. 基本的なグラフの描画方法について学習します。（7問）
 2. グラフの色や凡例・軸の編集の方法について学習します。（8問）
 3. グラフの外観の設定方法について学習します。（5問）

### 0. 事前準備

#### 0.1 「matplotlib.pyplotをpltという名前でインポートしこのnotebook上に図が表示されるようにして下さい。」
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
#フォントで警告が出る
import warnings
warnings.simplefilter('ignore')

"""#### 0.2 「以下のコードを実行してください。」"""

import numpy as np
import pandas as pd
data = pd.DataFrame()
np.random.seed(0)
data['身長'] = np.random.normal(170, 5, 100)
data['クラス'] = ['a', 'b', 'c', 'd'] * 25
data['成績'] = [ 2, 5, 4, 1, 4, 3, 4, 2, 4, 5] * 10
data['体重'] = np.random.normal(60, 3, 100)

"""### 1. 基本的なグラフの描画方法について学習します。（7問）

#### 1.1 「dataの中身を表示してください。」
"""

data

"""#### 1.2 「data内の身長のヒストグラムをデフォルト設定で描画して下さい。」"""

plt.hist(data['身長'])

"""#### 1.3 「data内の体重の折れ線グラフをデフォルト設定で描画して下さい。」"""

plt.plot(data['体重'])

"""#### 1.4 「data内の身長と体重の散布図をデフォルト設定で描画して下さい。」"""

x = data['身長']
y = data['体重']
plt.scatter(x, y, alpha=0.7)
plt.show()

"""#### 1.5 「散布図に回帰直線を追加してください。」"""

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.scatter(data['身長'], data['体重'])
m, c = np.polyfit(data['身長'], data['体重'], 1)
ax.plot(data['身長'], m*data['身長'] + c)
plt.show()

"""#### 1.6 「グラフに「Regression-line」というタイトルを付けてください。」"""

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.scatter(data['身長'], data['体重'])
m, c = np.polyfit(data['身長'], data['体重'], 1)
ax.plot(data['身長'], m*data['身長'] + c)
fig.suptitle('Regression-line')
plt.show()

"""#### 1.7 「上記グラフをpng形式で保存して下さい。※作業ディレクトリに格納された、test.pngを確認して下さい。」"""

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.scatter(data['身長'], data['体重'])
m, c = np.polyfit(data['身長'], data['体重'], 1)
ax.plot(data['身長'], m*data['身長'] + c)
fig.suptitle('Regression-line')
plt.savefig('test.png', bbox_inches='tight')

"""### 2. グラフの色や凡例・軸の編集（8問）

#### 2.1 「data内の身長の折れ線グラフを、クラスの値で色分けして一つのグラフに描画して下さい。」
"""

fig = plt.figure()
ax = fig.add_subplot(1,1,1)

for class_type in data['クラス'].unique():
     ax.plot(data.loc[data['クラス'] == class_type, '身長'].values)
plt.show()

"""#### 2.2 「上記のグラフに凡例を右上に作成して下さい。」"""

fig = plt.figure()
ax = fig.add_subplot(1,1,1)

for class_type in data['クラス'].unique():
     ax.plot(data.loc[data['クラス'] == class_type, '身長'].values, label=class_type)
ax.legend(loc='upper right')
plt.show()

"""#### 2.3 「dataの身長のヒストグラムをクラスで色分けして凡例付きで一つのグラフに描画して下さい。」"""

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
for class_type in data['クラス'].unique():
     ax.hist(data.loc[data['クラス'] == class_type, '身長'].values, label=class_type)
ax.legend(loc='upper right')
plt.show()

"""#### 2.4 「色が被ってしまっています。透明度を上げてください。(引数は何れの値でも可)」"""

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
for class_type in data['クラス'].unique():
     ax.hist(data.loc[data['クラス'] == class_type, '身長'].values, label=class_type, alpha=0.7)
ax.legend(loc='upper right')
plt.show()

"""#### 2.5 「ビンの値を細かくしてください。(引数は何れの値でも可)」"""

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
for class_type in data['クラス'].unique():
     ax.hist(data.loc[data['クラス'] == class_type, '身長'].values, label=class_type, alpha=0.7, bins = 20)
ax.legend(loc='upper right')
plt.show()

"""#### 2.6 「data内の身長のヒストグラムを作成して、フォントサイズを20にしてください。」"""

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.hist(data['身長'])
ax.tick_params(axis='x', labelsize=20)
ax.tick_params(axis='y', labelsize=20)
plt.show()

"""#### 2.7 「data内の身長のヒストグラムを作成して、x軸とy軸にそれぞれフォントサイズ15で'X', 'Y'と軸ラベルを設定して下さい。」"""

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.hist(data['身長'])
ax.set_xlabel('X', fontsize=15)
ax.set_ylabel('Y', fontsize=15)
plt.show()

"""#### 2.8 「上記のグラフのy軸の範囲を0から30にして下さい。」"""

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.hist(data['身長'])
ax.set_xlabel('X', fontsize=15)
ax.set_ylabel('Y', fontsize=15)
ax.set_ylim(0, 30)
plt.show()

"""### 3. グラフの外観の設定（5問）

#### 3.1 「下記の様なグラフの箱を4つ用意してください。」
"""

fig = plt.figure()
ax1 = fig.add_subplot(2,2,1)
ax2 = fig.add_subplot(2,2,2)
ax3 = fig.add_subplot(2,2,3)
ax4 = fig.add_subplot(2,2,4)
plt.show()

"""#### 3.2 「グラフのタイトルを'title'に設定してください。」"""

fig = plt.figure()
ax1 = fig.add_subplot(2,2,1)
ax2 = fig.add_subplot(2,2,2)
ax3 = fig.add_subplot(2,2,3)
ax4 = fig.add_subplot(2,2,4)
fig.suptitle('title')
plt.show()

"""#### 3.3 「各グラフのサブタイトルをそれぞれ、'1','2','3','4'に設定して下さい。」"""

fig = plt.figure()
ax1 = fig.add_subplot(2,2,1)
ax2 = fig.add_subplot(2,2,2)
ax3 = fig.add_subplot(2,2,3)
ax4 = fig.add_subplot(2,2,4)
fig.suptitle('title')
ax1.set_title('1')
ax2.set_title('2')
ax3.set_title('3')
ax4.set_title('4')
plt.show()

"""#### 3.4 「各グラフ同士が被ってしまっています。余白を縦0.5、横0.5に設定して下さい。」"""

fig = plt.figure()
ax1 = fig.add_subplot(2,2,1)
ax2 = fig.add_subplot(2,2,2)
ax3 = fig.add_subplot(2,2,3)
ax4 = fig.add_subplot(2,2,4)
fig.suptitle('title')
ax1.set_title('1')
ax2.set_title('2')
ax3.set_title('3')
ax4.set_title('4')
fig.subplots_adjust(wspace=0.5, hspace=0.5)
plt.show()

"""#### 3.5 「上記のグラフに、身長、成績、クラス、体重のヒストグラムを入力してください。」"""

fig = plt.figure()
ax1 = fig.add_subplot(2,2,1)
ax2 = fig.add_subplot(2,2,2)
ax3 = fig.add_subplot(2,2,3)
ax4 = fig.add_subplot(2,2,4)
fig.suptitle('title')
ax1.set_title('1')
ax1.hist(data['身長'])
ax2.set_title('2')
ax2.hist(data['成績'])
ax3.set_title('3')
ax3.hist(data['クラス'])
ax4.set_title('4')
ax4.hist(data['体重'])
fig.subplots_adjust(wspace=0.5, hspace=0.5)
plt.show()

